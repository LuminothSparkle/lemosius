private include "prueba3.lem";
public  include "prueba4.lem";

public  operator *  infix (left 9) as pub2_mult;
public  operator /  infix (left 9) as pub2_div;
public  operator +  infix (left 9) as pub2_plus;
public  operator -  infix (left 9) as pub2_minus;
public  operator -  prefix         as pub2_minus;
public  operator #  suffix         as pub2_hashtag;

public  operator **  infix (left 9) as pub2_mult;
public  operator *** infix (left 9) as pub2_mult;

public  operator != infix (left 9) as pub2_plus;
##<public  operator == infix (left 9) as priv2_plus;   ##<Definicion privada
private operator <= infix (left 9) as pub2_plus;
private operator >= infix (left 9) as priv2_plus;


public proc pub2_mult(var a,var b) {
    return priv2_mult(a,b);
}

public proc pub2_div(var a,var b) {
    return priv2_div(a,b);
}

public proc pub2_plus(var a,var b) {
    return priv2_plus(a,b);
}

public proc pub2_minus(var a,var b) {
    return priv2_minus(a,b);
}

public proc pub2_minus(var a) {
    return priv2_minus(a);
}

public proc pub2_hashtag(var a) {
    return priv2_hashtag(a);
}

private proc priv2_mult(var a,var b) {
    return product(a,b);
}

private proc priv2_div(var a,var b) {
    return division(a,b);
}

private proc priv2_plus(var a,var b) {
    return addition(a,b);
}

private proc priv2_minus(var a,var b) {
    return subtraction(a,b);
}

private proc priv2_minus(var a) {
    return minus(a);
}

private proc priv2_hashtag(var a) {
    return print(a);
}