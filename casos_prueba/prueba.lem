include "prueba2.lem";
##<include "prueba.lem";                              ##<Inclusión recursiva
##<include "prueba_no_existe.lem";                    ##<No existe archivo

##<include "hola.txt                                  ##<Error lexico, string no reconocida
##<dasdasd                                            ##<Error lexico, identificador en un mal lugar
##<include                                            ##<Error sintactico
##<include infix                                      ##<Error sintactico

##<operator * infix (left 9) as pub2_mult;            ##<Redeclaración de *
##<operator // infix (left 9) as priv2_div;           ##<Utilización de priv2_div que es privada
##<operator ++ infix (left 9) as pub2_hashtag;        ##<Sobrecarga no valida, no existe pub2_hashtag con dos argumentos
##<operator -- infix (left 9) as no_existe;           ##<Sobrecarga no valida, no existe ninguna funcion no_existe
##<operator -- infix (left 4294967296) as pub2_minus; ##<Sobrecarga no valida, no admite valores superiores a 4294967295
##<operator -- infix (left -1) as pub2_minus;         ##<Sobrecarga no valida, no admite valores inferiores a 0
##<operator                                           ##<Error sintactico
##<operator --                                        ##<Error sintactico
##<operator infix (left -1) as;                       ##<Error sintactico
##<operator -* infix (left 0) as pub2_minus           ##<Error sintactico

###<No puede sobrecargarse de nuevo>##
private proc pub2_mult(a,b) {
    return a * b;
}
###<>###

proc main() {
    var a := 0;
    var b := 0;
    
    ##<c;               ##<Utilización variable que no existe
    ##<var b;           ##<Redeclaración de variable
    ##<pub_plus(a,b);   ##<Utilización una funcion que no existe
    ##<pub2_plus(a);    ##<Utilización una sobrecarga que no existe
    ##<addition(a);     ##<Utilización una builtin que no existe
    a * b;              ##<Utiliza operador * de prueba2.lem
    ##<a ** b;
    ##<a *** b;

    ##<Utilización de funciones de prueba2.lem

    pub2_plus(a,b);     ##<Declaracion publica
    ##<priv2_plus(a,b); ##<Declaracion privada

    ##<Utilización de funciones de inclusion privada prueba3.lem en prueba2.lem

    ##<pub3_plus(a,b);  ##<Declaracion publica
    ##<priv3_plus(a,b); ##<Declaracion privada

    ##<Utilización de funciones de inclusion privada prueba4.lem en prueba2.lem

    pub4_plus(a,b);     ##<Declaracion publica
    ##<priv4_plus(a,b); ##<Declaracion privada

    ##<Utilización de operadores de prueba2.lem

    a!=b;               ##<Declaracion publica definicion publica.
    ##<a==b;            ##<Declaracion publica definicion privada.
    ##<a<=b;            ##<Declaracion privada definicion publica
    ##<a>=b;            ##<Declaracion privada definicion privada

    ##<Utilización de operadores de inclusion privada prueba3.lem en prueba2.lem

    ##<a\\;             ##<Declaracion publica definicion publica.
    ##<a..;             ##<Declaracion publica definicion privada.
    ##<a::;             ##<Declaracion privada definicion publica
    ##<a??;             ##<Declaracion privada definicion privada

    ##<Utilización de operadores de inclusion publica prueba4.lem en prueba2.lem

    a&&;                ##<Declaracion publica definicion publica.
    ##<a!!;             ##<Declaracion publica definicion privada.
    ##<a'';             ##<Declaracion privada definicion publica
    ##<a||;             ##<Declaracion privada definicion privada
    
    print(a + 2);
    print(b + 1);
}