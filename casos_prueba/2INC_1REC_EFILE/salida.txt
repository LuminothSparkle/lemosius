Compilacion exitosa
included_program:
resources: 
operator # infix (right 4) as something; 
private operator + prefix as plus;               ## los operadores también pueden ser privados


###
Comentario multilinea de prueba
###

## el lenguaje sólo manejará reales por simplicidad
## para no meternos en broncas, supondremos que ya están definidas las siguientes funciones
##   addition de dos operandos
##   subtraction de dos operandos
##   product de dos operandos
##   division de dos operandos
##   plus de un operando
##   minus de un operando
##   assign binario
## el lenguaje también predefine el símbolo := como operador de asignación que delega a assign

proc f(a, b) {
   var c := a + b;
   c := c + 1;
   return c;
}

proc fib(n) {
   if(n <= 1) {          ## error de compilación: <= no está definido
      return n;
   } else {
      return fib(n - 1) + fib(n - 2);
   }
}

private proc g( ) {     ## este archivo puede usar los símbolos privados, pero nadie que incluya este archivo puede usarlos
   return 123.456;          
}

proc h( ) {
   return 2 * g( );     ## error de compilación: * no está definido
}


Token.type:OPERATOR_K	Token.source: operator
Token.type:OPERATOR_L	Token.source: #
Token.type:INFIX_K	Token.source: infix
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RIGHT_K	Token.source: right
Token.type:NUMBER_L	Token.source: 4
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:AS_K	Token.source: as
Token.type:IDENTIFIER_L	Token.source: something
Token.type:SEMICOLON_P	Token.source: ;
Token.type:PRIVATE_K	Token.source: private
Token.type:OPERATOR_K	Token.source: operator
Token.type:OPERATOR_L	Token.source: +
Token.type:PREFIX_K	Token.source: prefix
Token.type:AS_K	Token.source: as
Token.type:IDENTIFIER_L	Token.source: plus
Token.type:SEMICOLON_P	Token.source: ;
Token.type:END_OF_INPUT	Token.source: proc

Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: f
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: a
Token.type:COMMA_P	Token.source: ,
Token.type:IDENTIFIER_L	Token.source: b
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:VAR_K	Token.source: var
Token.type:IDENTIFIER_L	Token.source: c
Token.type:ASSIGNMENT_O	Token.source: :=
Token.type:IDENTIFIER_L	Token.source: a
Token.type:OPERATOR_L	Token.source: +
Token.type:IDENTIFIER_L	Token.source: b
Token.type:SEMICOLON_P	Token.source: ;
Token.type:IDENTIFIER_L	Token.source: c
Token.type:ASSIGNMENT_O	Token.source: :=
Token.type:IDENTIFIER_L	Token.source: c
Token.type:OPERATOR_L	Token.source: +
Token.type:NUMBER_L	Token.source: 1
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RETURN_K	Token.source: return
Token.type:IDENTIFIER_L	Token.source: c
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: fib
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:IF_K	Token.source: if
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:OPERATOR_L	Token.source: <=
Token.type:NUMBER_L	Token.source: 1
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:IDENTIFIER_L	Token.source: n
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:ELSE_K	Token.source: else
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:IDENTIFIER_L	Token.source: fib
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:OPERATOR_L	Token.source: -
Token.type:NUMBER_L	Token.source: 1
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:OPERATOR_L	Token.source: +
Token.type:IDENTIFIER_L	Token.source: fib
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:OPERATOR_L	Token.source: -
Token.type:NUMBER_L	Token.source: 2
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:RBRACE_P	Token.source: }
Token.type:PRIVATE_K	Token.source: private
Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: g
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:NUMBER_L	Token.source: 123.456
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: h
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:NUMBER_L	Token.source: 2
Token.type:OPERATOR_L	Token.source: *
Token.type:IDENTIFIER_L	Token.source: g
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:END_OF_INPUT	Token.source: 


resources: 
include "prueba2.txt";                             ## hay que decidir la extensión #
private include "prueba3.txt";                    ## en este archivo puedes usar los símbolos públicos de una inclusión privada, pero quien te incluya no puede usarlos (private rompe la transitividad) ###

operator ! suffix as factorial;                  ## un operador se puede definir varias veces, siempre y cuando sea con diferente posición ##
operator + infix (left 3) as addition;           ## para la posición infija, dentro de paréntesis van la asociatividad y la precedencia ###
operator ^ infix (right 5) as power;


###
Comentario multilinea de prueba ##
#
###

## el lenguaje sólo manejará reales por simplicidad
## para no meternos en broncas, supondremos que ya están definidas las siguientes funciones
##   addition de dos operandos
##   subtraction de dos operandos
##   product de dos operandos
##   division de dos operandos
##   plus de un operando
##   minus de un operando
##   assign binario
## el lenguaje también predefine el símbolo := como operador de asignación que delega a assign

proc f(a, b) {
   var c := a + b;
   c := c + 1;
   return c;
}

proc fib(n) {
   if(n <= 1) {          ## error de compilación: <= no está definido
      return n;
   } else {
      return fib(n - 1) + fib(n - 2);
   }
}

private proc g( ) {     ## este archivo puede usar los símbolos privados, pero nadie que incluya este archivo puede usarlos
   return 123.456;          
}

proc h( ) {
   return 2 * g( );     ## error de compilación: * no está definido
}


Token.type:INCLUDE_K	Token.source: include
Token.type:STRING_L	Token.source: "prueba2.txt"
Token.type:SEMICOLON_P	Token.source: ;
Token.type:PRIVATE_K	Token.source: private
Token.type:INCLUDE_K	Token.source: include
Token.type:STRING_L	Token.source: "prueba3.txt"
Token.type:SEMICOLON_P	Token.source: ;
Token.type:OPERATOR_K	Token.source: operator
Token.type:OPERATOR_L	Token.source: !
Token.type:SUFFIX_K	Token.source: suffix
Token.type:AS_K	Token.source: as
Token.type:IDENTIFIER_L	Token.source: factorial
Token.type:SEMICOLON_P	Token.source: ;
Token.type:OPERATOR_K	Token.source: operator
Token.type:OPERATOR_L	Token.source: +
Token.type:INFIX_K	Token.source: infix
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:LEFT_K	Token.source: left
Token.type:NUMBER_L	Token.source: 3
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:AS_K	Token.source: as
Token.type:IDENTIFIER_L	Token.source: addition
Token.type:SEMICOLON_P	Token.source: ;
Token.type:OPERATOR_K	Token.source: operator
Token.type:OPERATOR_L	Token.source: ^
Token.type:INFIX_K	Token.source: infix
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RIGHT_K	Token.source: right
Token.type:NUMBER_L	Token.source: 5
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:AS_K	Token.source: as
Token.type:IDENTIFIER_L	Token.source: power
Token.type:SEMICOLON_P	Token.source: ;
Token.type:END_OF_INPUT	Token.source: proc

Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: f
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: a
Token.type:COMMA_P	Token.source: ,
Token.type:IDENTIFIER_L	Token.source: b
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:VAR_K	Token.source: var
Token.type:IDENTIFIER_L	Token.source: c
Token.type:ASSIGNMENT_O	Token.source: :=
Token.type:IDENTIFIER_L	Token.source: a
Token.type:OPERATOR_L	Token.source: +
Token.type:IDENTIFIER_L	Token.source: b
Token.type:SEMICOLON_P	Token.source: ;
Token.type:IDENTIFIER_L	Token.source: c
Token.type:ASSIGNMENT_O	Token.source: :=
Token.type:IDENTIFIER_L	Token.source: c
Token.type:OPERATOR_L	Token.source: +
Token.type:NUMBER_L	Token.source: 1
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RETURN_K	Token.source: return
Token.type:IDENTIFIER_L	Token.source: c
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: fib
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:IF_K	Token.source: if
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:OPERATOR_L	Token.source: <=
Token.type:NUMBER_L	Token.source: 1
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:IDENTIFIER_L	Token.source: n
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:ELSE_K	Token.source: else
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:IDENTIFIER_L	Token.source: fib
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:OPERATOR_L	Token.source: -
Token.type:NUMBER_L	Token.source: 1
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:OPERATOR_L	Token.source: +
Token.type:IDENTIFIER_L	Token.source: fib
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:IDENTIFIER_L	Token.source: n
Token.type:OPERATOR_L	Token.source: -
Token.type:NUMBER_L	Token.source: 2
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:RBRACE_P	Token.source: }
Token.type:PRIVATE_K	Token.source: private
Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: g
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:NUMBER_L	Token.source: 123.456
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:PROC_K	Token.source: proc
Token.type:IDENTIFIER_L	Token.source: h
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:LBRACE_P	Token.source: {
Token.type:RETURN_K	Token.source: return
Token.type:NUMBER_L	Token.source: 2
Token.type:OPERATOR_L	Token.source: *
Token.type:IDENTIFIER_L	Token.source: g
Token.type:LPARENTHESIS_P	Token.source: (
Token.type:RPARENTHESIS_P	Token.source: )
Token.type:SEMICOLON_P	Token.source: ;
Token.type:RBRACE_P	Token.source: }
Token.type:END_OF_INPUT	Token.source: 



operator_declaration:
visibility: nullptr
symbol: Token.type:OPERATOR_L	Token.source: !
position: Token.type:SUFFIX_K	Token.source: suffix
asociativity: nullptr
precedence: nullptr
function: Token.type:IDENTIFIER_L	Token.source: factorial

operator_declaration:
visibility: nullptr
symbol: Token.type:OPERATOR_L	Token.source: #
position: Token.type:INFIX_K	Token.source: infix
asociativity: Token.type:RIGHT_K	Token.source: right
precedence: Token.type:NUMBER_L	Token.source: 4
function: Token.type:IDENTIFIER_L	Token.source: something

operator_declaration:
visibility: nullptr
symbol: Token.type:OPERATOR_L	Token.source: +
position: Token.type:INFIX_K	Token.source: infix
asociativity: Token.type:LEFT_K	Token.source: left
precedence: Token.type:NUMBER_L	Token.source: 3
function: Token.type:IDENTIFIER_L	Token.source: addition

operator_declaration:
visibility: nullptr
symbol: Token.type:OPERATOR_L	Token.source: ^
position: Token.type:INFIX_K	Token.source: infix
asociativity: Token.type:RIGHT_K	Token.source: right
precedence: Token.type:NUMBER_L	Token.source: 5
function: Token.type:IDENTIFIER_L	Token.source: power

